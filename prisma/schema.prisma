// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "cockroachdb"
    // provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String?
    provider                 String?
    providerAccountId        String?
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    ext_expires_in           Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    username        String?   @unique
    emailVerified   DateTime?
    image           String?   @default("https://jwxqxlsoznvanzoqgpvb.supabase.co/storage/v1/object/public/profile-pictures/Perfil_default.png")
    organizations   String?
    role            String?
    description     String?
    accounts        Account[]
    sessions        Session[]
    eventsOwned     Event[]   @relation(name: "owned")
    eventsConfirmed Event[]   @relation(name: "confirmed")
    // Comment       Comment[]
}

model Event {
    id             String      @id @default(cuid())
    name           String
    owners         User[]      @relation(name: "owned")
    confirmed      User[]      @relation(name: "confirmed")
    description    String
    lastUpdate     DateTime    @updatedAt
    image          String      @default("https://jwxqxlsoznvanzoqgpvb.supabase.co/storage/v1/object/public/profile-pictures/Perfil_default.png")
    location       String
    visibility     String
    linkVisibility String      @default("organizationMember")
    tags           Tag[]
    dates          DateStamp[]
    rrule          String?
    // comment     Comment[]
}

model DateStamp {
    id      String   @id @default(cuid())
    start   DateTime
    end     DateTime
    eventId String
    event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Admin {
    email String @unique
}

model Tag {
    name     String  @id @unique
    tagColor String
    events   Event[]
}

model OrganizationMember {
    email String @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Later implementation: 
// model Comment {
//     id        String   @id @default(cuid())
//     text      String
//     createdAt DateTime @default(now())
//     eventId   String
//     Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
//     userId    String
//     User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
